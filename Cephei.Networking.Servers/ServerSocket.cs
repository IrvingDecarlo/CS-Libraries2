using System;
using System.Net.Sockets;
using System.Threading;

namespace Cephei.Networking.Servers
{
  /// <summary>
  /// The ServerSocket is a server that operates via sockets. It raises events on new connections.
  /// </summary>
  public abstract class ServerSocket : IServer<Socket>
  {
    /// <summary>
    /// Wraps the socket server around an already existing socket.
    /// </summary>
    /// <param name="socket">Socket to wrap the server around.</param>
    /// <remarks>The socket should be brand-new, without preexisting connections.</remarks>
    public ServerSocket(Socket socket) => Socket = socket;
    /// <summary>
    /// Instantiates a socket server around a default socket (stream, TCP connection).
    /// </summary>
    public ServerSocket() : this(new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))
    { }

    #region overrides

    /// <summary>
    /// OnConnectionEstablished is raised when a new client connection is established with the server.
    /// </summary>
    public event Action<Socket>? OnConnectionEstablished;

    /// <summary>
    /// Gets or sets if the server is active listening to new connections.
    /// </summary>
    /// <remarks>Setting to false will not yield immediate results since awaiting for new connections cannot be instantly interrupted.</remarks>
    public bool Listening
    {
      set
      {
        if (value == Listening) return;
        if (value)
        {
          Socket.Listen(GetBacklog());
          cts = new CancellationTokenSource();
          StartListening(cts.Token);
          return;
        }
        if (cts is null) return;
        cts.Cancel();
        Socket.Close();
        cts.Dispose();
        cts = null;
      }
      get => !(cts is null);
    }

    /// <summary>
    /// Initiates the socket server, binding it to an end point.
    /// </summary>
    public abstract void Initiate();

    /// <summary>
    /// Disposes of the listening socket.
    /// </summary>
    public virtual void Dispose() => Socket.Dispose();

    #endregion

    #region public

    /// <summary>
    /// The main socket that the server operates over.
    /// </summary>
    public readonly Socket Socket;

    #endregion

    #region protected

    /// <summary>
    /// Gets the listening backlog size.
    /// </summary>
    /// <returns>The listening backlog size. Default value is 16.</returns>
    protected virtual int GetBacklog() => 16;

    /// <summary>
    /// HandleUnhandledSocket is called when OnConnectionEstablished is raised but there are no consumers. By default, it disposes of the new socket.
    /// </summary>
    /// <param name="socket">Socket that was generated by the new connection.</param>
    protected virtual void HandleUnhandledSocket(Socket socket) => socket.Dispose();

    #endregion

    #region private

    // VARIABLES

    private CancellationTokenSource? cts;

    // METHODS

    private async void StartListening(CancellationToken token)
    {
      Socket socket;
      while (!token.IsCancellationRequested)
      {
        socket = await Socket.AcceptAsync();
        if (OnConnectionEstablished is null) HandleUnhandledSocket(socket);
        else OnConnectionEstablished(socket);
      }
    }

    #endregion
  }
}
