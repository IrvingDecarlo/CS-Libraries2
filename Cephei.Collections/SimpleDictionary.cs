using System.Collections.Generic;

namespace Cephei.Collections
{
  /// <summary>
  /// The SimpleDictionary as a Dictionary where objects can be added directly only as their key is generated by the dictionary itself.
  /// </summary>
  /// <typeparam name="T">Key type.</typeparam>
  /// <typeparam name="U">Value type.</typeparam>
  public abstract class SimpleDictionary<T, U> : SimpleDictionary<T, U, IDictionary<T, U>>
  {
    /// <summary>
    /// Wraps this simple dictionary over an already existing dictionary.
    /// </summary>
    /// <param name="dict">Dictionary to wrap it over.</param>
    public SimpleDictionary(IDictionary<T, U> dict) : base(dict) 
    { }
    /// <summary>
    /// Creates a SimpleDictionary over the simple dictionary.
    /// </summary>
    public SimpleDictionary() : base(new Dictionary<T, U>()) 
    { }
  }
  /// <summary>
  /// The SimpleDictionary as a Dictionary where objects can be added directly only as their key is generated by the dictionary itself.
  /// </summary>
  /// <typeparam name="T">Key type.</typeparam>
  /// <typeparam name="U">Value type.</typeparam>
  /// <typeparam name="V">Collection type for the dictionary.</typeparam>
  public abstract class SimpleDictionary<T, U, V> : ProtectedSimpleDictionary<T, U, V>, ISimpleDictionary<T, U> where V : IDictionary<T, U>
  {
    /// <summary>
    /// Wraps the SimpleDictionary over an already existing dictionary.
    /// </summary>
    /// <param name="dict">Dictionary to wrap it over.</param>
    public SimpleDictionary(V dict) : base(dict) 
    { }

    #region overrides

    /// <summary>
    /// Adds the object to the simple dictionary.
    /// </summary>
    /// <param name="value">Object to add to the dictionary.</param>
    public void Add(U value) => Collection.Add(GetKey(value), value);

    /// <summary>
    /// Clears the dictionary.
    /// </summary>
    public void Clear() => Collection.Clear();

    /// <summary>
    /// Removes an object from the dictionary.
    /// </summary>
    /// <param name="value">Object to remove.</param>
    /// <returns>True if the object was located and removed.</returns>
    public bool Remove(U value) => Collection.Remove(GetKey(value));

    /// <summary>
    /// Is this dictionary read-only? Returns false by default.
    /// </summary>
    public sealed override bool IsReadOnly => false;

    #endregion
  }
}
