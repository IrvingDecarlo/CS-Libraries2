name: Publish NuGet Packages

on:
  push:
    branches:
      - master

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Get modified .csproj files
        id: get-changes
        run: |
          echo "Fetching modified .csproj files in all commits from the current push..."

          # Fetch full history to ensure valid references
          git fetch --prune --unshallow || true
          git fetch origin master --depth=2 || true

          # Get the list of commit SHAs in this push
          PREVIOUS_SHA=${{ github.event.before }}
          if [ -z "$PREVIOUS_SHA" ] || ! git rev-parse "$PREVIOUS_SHA" >/dev/null 2>&1; then
            PREVIOUS_SHA=$(git rev-list -n 1 HEAD~1)
          fi
          echo "Commits in the push:"
          COMMITS=$(git rev-list $PREVIOUS_SHA..${{ github.sha }})
          echo "$COMMITS"

          # Remove duplicates and output modified projects
          MODIFIED_PROJECTS=$(git diff --name-only $PREVIOUS_SHA..${{ github.sha }} | grep '\.csproj$' | sort | uniq || true)
          if [ -z "${MODIFIED_PROJECTS}" ]; then
            echo "No modified .csproj files found in the latest push."
          else
            echo "Modified projects:"
            echo "$MODIFIED_PROJECTS"
          fi
          MODIFIED_PROJECTS=$(echo "$MODIFIED_PROJECTS" | tr '\n' ',' | sed 's/,$//')
          echo "MODIFIED_PROJECTS=$MODIFIED_PROJECTS" >> $GITHUB_ENV

      - name: Setup .NET
        if: env.MODIFIED_PROJECTS != ''
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Restore dependencies
        if: env.MODIFIED_PROJECTS != ''
        run: dotnet restore

      - name: Build and pack modified projects
        if: env.MODIFIED_PROJECTS != ''
        run: |
          echo "Processing modified .csproj files..."
          MODIFIED_PROJECTS=$(echo ${{ env.MODIFIED_PROJECTS }} | tr ',' '\n')
          for project in $MODIFIED_PROJECTS; do
            echo "Building and packing project: $project"
            dotnet build --configuration Release --no-restore "$project" || {
              warning "Error occurred while building $project. Check logs for details."
            }
            dotnet pack --configuration Release --no-build --output ./nupkg $project || {
              warning "Error occurred while packing $project. Check logs for details."
            }
          done

      - name: Publish packages
        if: env.MODIFIED_PROJECTS != ''
        run: |
          echo "Publishing .nupkg files..."
          for package in $(find ./nupkg -name '*.nupkg'); do
            dotnet nuget push "$package" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate || {
              warning "Error occurred while publishing $package. Check logs for details."
            }
          done
