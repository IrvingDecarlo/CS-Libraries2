name: Publish NuGet Packages

on:
  push:
    branches:
      - master

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Get modified .csproj files
        id: get-changes
        run: |
          # Gets all modified .csproj files in the last push's commits.
          echo -e "\033[36mFetching modified .csproj files in all commits from the current push...\033[0m"
          
          # Fetch full history to ensure valid references
          git fetch --prune --unshallow || true
          git fetch origin master --depth=2 || true
          
          # Get the list of commit SHAs in this push
          PREVIOUS_SHA=${{ github.event.before }}
          if [ -z "$PREVIOUS_SHA" ] || ! git rev-parse "$PREVIOUS_SHA" >/dev/null 2>&1; then
            PREVIOUS_SHA=$(git rev-list -n 1 HEAD~1)
          fi
          echo -e "\033[36mCommits in the push:\033[0m"
          COMMITS=$(git rev-list $PREVIOUS_SHA..${{ github.sha }})
          echo "$COMMITS"
          COMMITS=${{ github.event.commits }}
          echo "Test commits:"
          for commit in $COMMITS
            echo "$commit"
          done
          
          # Get all modified projects
          MODIFIED_PROJECTS=$(git diff --name-only $PREVIOUS_SHA..${{ github.sha }} | grep '\.csproj$' | sort | uniq || true)
          
          # Output and filter modified projects
          FILTERED_PROJECTS=""
          echo -e "\033[36mModified projects:\033[0m"
          for project in $MODIFIED_PROJECTS; do
            if grep -q "<SkipPublish>True</SkipPublish>" "$project"; then
              echo -e "\033[31m$project (skipped)\033[0m"
            else
              FILTERED_PROJECTS="$FILTERED_PROJECTS$project,"
              echo "$project"
            fi
          done
          if [ -z "${FILTERED_PROJECTS}" ]; then
            echo -e "\033[33mNo modified .csproj files found in the current push.\033[0m"
          fi
          MODIFIED_PROJECTS=${FILTERED_PROJECTS%,}
          echo "MODIFIED_PROJECTS=$MODIFIED_PROJECTS" >> $GITHUB_ENV

      - name: Setup .NET
        if: env.MODIFIED_PROJECTS != ''
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Build and pack modified projects
        if: env.MODIFIED_PROJECTS != ''
        run: |
          # Builds and packs all modified projects.
          echo -e "\033[36mProcessing modified .csproj files...\033[0m"
          FAILED_PROJECTS=""
          MODIFIED_PROJECTS=$(echo ${{ env.MODIFIED_PROJECTS }} | tr ',' '\n')
          for project in $MODIFIED_PROJECTS; do
            echo -e "\033[35mBuilding and packing project: $project\033[0m"
            if dotnet pack --configuration Release --output ./nupkg $project; then
              echo -e "\033[32mProject $project packed successfully.\033[0m"
            else
              FAILED_PROJECTS="$FAILED_PROJECTS$project,"
            fi
          done
          echo "FAILED_PROJECTS=$FAILED_PROJECTS" >> $GITHUB_ENV

      - name: Publish packages
        if: env.MODIFIED_PROJECTS != ''
        run: |
          # Publishes all built packages.
          echo -e "\033[36mPublishing generated .nupkg files...\033[0m"
          FAILED_PROJECTS=$(echo ${{ env.FAILED_PROJECTS }})
          for package in $(find ./nupkg -name '*.nupkg'); do
            echo -e "\033[35mPublishing file $package...\033[0m"
            if dotnet nuget push "$package" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate; then
              echo -e "\033[32mPackage $package published successfully.\033[0m"
            else
              FAILED_PROJECTS="$FAILED_PROJECTS$package,"
            fi
          done
          echo "FAILED_PROJECTS=$FAILED_PROJECTS" >> $GITHUB_ENV

      - name: Output failure
        if: env.FAILED_PROJECTS != ''
        run: |
          # Outputs all failed projects in the console and fails the process.
          FAILED_PROJECTS=$(echo ${{ env.FAILED_PROJECTS }} | sed 's/,$//')
          echo "::error::The following projects failed to pack/publish: $FAILED_PROJECTS"
          exit 1
