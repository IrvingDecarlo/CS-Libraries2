name: Publish NuGet Packages

on:
  push:
    branches:
      - master

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Get modified .csproj files
        id: get-changes
        run: |
          echo "Fetching modified .csproj files in all commits from the current push..."

          # Fetch full history to ensure valid references
          git fetch --prune --unshallow || true
          git fetch origin master --depth=2 || true

          # Get the list of commit SHAs in this push
          PREVIOUS_SHA=${{ github.event.before }}
          if [ -z "$PREVIOUS_SHA" ] || ! git rev-parse "$PREVIOUS_SHA" >/dev/null 2>&1; then
            PREVIOUS_SHA=$(git rev-list -n 1 HEAD~1)
          fi

          echo "Commits in the push:"
          COMMITS=$(git rev-list $PREVIOUS_SHA..${{ github.sha }})
          echo "$COMMITS"

          # Find modified .csproj files across all commits
          MODIFIED_PROJECTS=""
          for commit in $COMMITS; do
            echo "Checking commit: $commit"
            CHANGED_FILES=$(git show --name-only $commit | grep '\.csproj$' || true)
            MODIFIED_PROJECTS="$MODIFIED_PROJECTS"$'\n'"$CHANGED_FILES"
          done

          # Remove duplicates and output modified projects
          MODIFIED_PROJECTS=$(echo "$MODIFIED_PROJECTS" | sort | uniq | grep '\.csproj$' || true)
          echo "Modified projects:"
          echo "$MODIFIED_PROJECTS"
          if MODIFIED_PROJECTS == ''
            echo "No modified .csproj files found in the latest push."
          fi
          echo "MODIFIED_PROJECTS=$MODIFIED_PROJECTS" >> $GITHUB_ENV

      - name: Setup .NET
        if: env.MODIFIED_PROJECTS != ''
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Restore dependencies
        if: env.MODIFIED_PROJECTS != ''
        run: dotnet restore

      - name: Build and publish modified projects
        if: env.MODIFIED_PROJECTS != ''
        run: |
          echo "Processing modified .csproj files..."
          for project in ${{ steps.get-changes.outputs.projects }}; do
            echo "Building and packing project: $project"
            dotnet build --configuration Release --no-restore "$project"
            
            PACKAGE_PATH=$(find "$(dirname "$project")/bin/Release" -name '*.nupkg')
            for package in $PACKAGE_PATH; do
              echo "Attempting to publish package: $package"
              dotnet nuget push "$package" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate || {
                echo "Error occurred while publishing $package. Check logs for details."
              }
            done
          done
