<?xml version="1.0"?>
<doc>
    <assembly>
        <name>cto</name>
    </assembly>
    <members>
        <member name="T:Cephei.Tools.Extensions">
            <summary>
            Tools.Extensions serve only to extend .NET classes.
            </summary>
        </member>
        <member name="M:Cephei.Tools.Extensions.SplitProtected(System.String,System.Char,System.Boolean,System.Char[])">
            <summary>
            Reads a string and transforms it into a list of split strings, using a char separator. It also respects the "protector" chars, which are to act as quotes.
            </summary>
            <param name="input">The input string.</param>
            <param name="sep">The separator char.</param>
            <param name="trim">Trim split strings?</param>
            <param name="prots">The protector chars.</param>
            <returns>The list of split strings.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cephei.Tools.Extensions.SplitProtected(System.String,System.Boolean)">
            <summary>
            Splits the string using the default separator (blank spaces and tabs) and protectors (single and double quotes).
            </summary>
            <param name="input">The string to be separated.</param>
            <param name="tabsspaces">Should tabs be converted to spaces?</param>
            <returns>List of separated strings.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cephei.Tools.Extensions.SplitProtected(System.String,System.Char)">
            <summary>
            Splits the string using a custom separator, but with default protectors (single and double quotes).
            </summary>
            <param name="input">The string to be separated.</param>
            <param name="sep">The separator to be used.</param>
            <returns>The separated string.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cephei.Tools.Extensions.BreakLines(System.String,System.Int32)">
            <summary>
            Breaks the input string into lines by length. Once the line grows to be longer than length then a line break will be introduced. It will prioritize breaking
            blank spaces. If none are found then the text itself will be broken.
            </summary>
            <param name="input">Input string to break.</param>
            <param name="length">Maximum character length per line.</param>
            <returns>The StringBuilder with input broken into parts.</returns>
        </member>
        <member name="M:Cephei.Tools.Extensions.BreakLines(System.Text.StringBuilder,System.Int32)">
            <summary>
            Breaks the StringBuilder into lines by length. Once the line grows to be longer than length then a line break will be introduced. It will prioritize breaking
            blank spaces. If none are found then the text itself will be broken.
            </summary>
            <param name="input">The StringBuilder.</param>
            <param name="length">Maximum character length per line.</param>
            <returns>Number of lines that were broken.</returns>
        </member>
        <member name="M:Cephei.Tools.Extensions.SafeInsert(System.String,System.Int32,System.String)">
            <summary>
            Inserts a substring into a string, always keeping index within bounds and also considering if the string is empty or null.
            </summary>
            <param name="str">The string to receive.</param>
            <param name="index">Index to insert.</param>
            <param name="value">String to insert.</param>
            <returns>The string with the insertion.</returns>
        </member>
        <member name="M:Cephei.Tools.Extensions.ToPairString``2(System.Collections.Generic.KeyValuePair{``0,``1},System.String)">
            <summary>
            Returns a string containing the KeyValuePair, in the format "key=value".
            </summary>
            <typeparam name="T">The key type.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="kvp">The KeyValuePair.</param>
            <param name="sep">Separator to use between the Key and the Value.</param>
            <returns>A string representing the KeyValuePair.</returns>
        </member>
        <member name="M:Cephei.Tools.Extensions.ToPairString(System.Collections.DictionaryEntry,System.String)">
            <summary>
            Returns a string representing a DictionaryEntry, in the format "key=value".
            </summary>
            <param name="entry">The DictionaryEntry.</param>
            <param name="sep">Separator to use between the Key and the Value.</param>
            <returns>A string representing the DictionaryEntry.</returns>
        </member>
        <member name="M:Cephei.Tools.Extensions.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps a double between a min and max value.
            </summary>
            <param name="val">The value to be clamped.</param>
            <param name="max">Max value.</param>
            <param name="min">Min value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Cephei.Tools.Extensions.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps an int between a min and max value.
            </summary>
            <param name="val">The value to be clamped.</param>
            <param name="max">Max value.</param>
            <param name="min">Min value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Cephei.Tools.Extensions.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>
            Clamps a short between a min and max value.
            </summary>
            <param name="val">The value to be clamped.</param>
            <param name="max">Max value.</param>
            <param name="min">Min value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Cephei.Tools.Extensions.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            Clamps a byte between a min and max value.
            </summary>
            <param name="val">The value to be clamped.</param>
            <param name="max">Max value.</param>
            <param name="min">Min value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Cephei.Tools.Extensions.GetNumberOfDigits(System.Double)">
            <summary>
            Gets the number of non-decimal digits a double has.
            </summary>
            <param name="val">Value to get the number of digits from.</param>
            <returns>The value's number of digits.</returns>
        </member>
        <member name="M:Cephei.Tools.Extensions.GetNumberOfDigits(System.Int32)">
            <summary>
            Gets the number of digits a convertible an int has.
            </summary>
            <param name="val">Value to get the number of digits from.</param>
            <returns>The value's number of digits.</returns>
            <remarks>This is double.GetNumberOfDigits but with the appropriate casts. Use the double's version if the value was already casted or if
            a double with the same value exists.</remarks>
        </member>
        <member name="M:Cephei.Tools.Extensions.SafeCopyTo(System.String,System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies a portion of a string to a character array, keeping it within bounds so that it does not overflow.
            </summary>
            <param name="str">Source string.</param>
            <param name="sourceindex">Starting index for the source.</param>
            <param name="destination">Destination character array.</param>
            <param name="destindex">Starting index for the destination.</param>
            <param name="count">Number of characters to be copied to the destination.</param>
            <returns>The actual number of copied characters.</returns>
        </member>
        <member name="M:Cephei.Tools.Extensions.CopyTo(System.String,System.Span{System.Char},System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies a portion of a string to a character span, keeping it within bounds so that it does not overflow.
            </summary>
            <param name="str">Source string.</param>
            <param name="span">Target span.</param>
            <param name="sourceindex">Starting index for the source.</param>
            <param name="targetindex">Starting index for the target.</param>
            <param name="count">Number of characters to be copied.</param>
            <returns>Actual number of copied characters.</returns>
        </member>
        <member name="M:Cephei.Tools.Extensions.IsBackspace(System.Char)">
            <summary>
            Is this char a backspace?
            </summary>
            <param name="chr">The char to check.</param>
            <returns>True if is a backspace, false otherwise.</returns>
        </member>
        <member name="M:Cephei.Tools.Extensions.ToBool(System.String,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Converts a string to bool using default collections.
            True: "TRUE", "T", "YES", "Y", "1".
            False: "FALSE", "F", "NO", "N", "0".
            </summary>
            <param name="str">The string to be converted.</param>
            <param name="handlenotfound">If the string does not match into any of the default collections, then it will return this parameter.
            If this parameter is set to null then an exception will be thrown instead.</param>
            <param name="toupper">Convert string to upper invariant?</param>
            <returns>The string converted to bool.</returns>
        </member>
        <member name="M:Cephei.Tools.Extensions.ToBool``1(``0,System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Nullable{System.Boolean})">
            <summary>
            Converts a value to bool.
            </summary>
            <param name="str">The value to be converted.</param>
            <param name="truecol">Collection of values that represent "true".</param>
            <param name="falsecol">Collection of values that represent "false".</param>
            <param name="handlenotfound">If the string does not match into any of the collections then it will return this parameter.
            If this parameter is set to null then an exception will be thrown instead.</param>
            <returns>The string converted to bool.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Cephei.Tools.Extensions.SafeEquals(System.Object,System.Object)">
            <summary>
            A safe version of Equals where both objects are checked if they are null.
            </summary>
            <param name="this">Object that will equate to the other.</param>
            <param name="other">Object that will be equated by the first.</param>
            <returns>True if both are null or if both are equals.</returns>
        </member>
        <member name="M:Cephei.Tools.Extensions.TryAppend(System.Text.StringBuilder,System.Char)">
            <summary>
            Tries to append a character to the StringBuilder. Control characters are not added.
            </summary>
            <param name="sb">StringBuilder to receive the character.</param>
            <param name="add">Character to add to the StringBuilder.</param>
            <returns>True if the char was added.</returns>
        </member>
        <member name="T:Cephei.Tools.Tool">
            <summary>
            The static Tool class contains a set of common use methods.
            </summary>
        </member>
        <member name="M:Cephei.Tools.Tool.Max``1(``0[])">
            <summary>
            Returns the biggest value within a collection.
            </summary>
            <typeparam name="T">Object type to be validated.</typeparam>
            <param name="parms">Collection of values to compare.</param>
            <returns>The biggest value in the collection.</returns>
        </member>
        <member name="M:Cephei.Tools.Tool.Min``1(``0[])">
            <summary>
            Returns the smallest value within a collection.
            </summary>
            <typeparam name="T">Object type to be validated.</typeparam>
            <param name="parms">Collection of values to compare.</param>
            <returns>The smallest value in the collection.</returns>
        </member>
        <member name="M:Cephei.Tools.Tool.Backspace(System.Int32,System.Boolean)">
            <summary>
            Returns a string containing a specified amount of backspaces. May also include empty spaces to represent deletion.
            </summary>
            <param name="amount">Number of spaces to backtrack.</param>
            <param name="erase">Erase characters?</param>
            <returns>The string representing the backspaces and deletions.</returns>
        </member>
    </members>
</doc>
